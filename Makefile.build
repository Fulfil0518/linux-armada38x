export CROSS_COMPILE ?= /usr/bin/arm-linux-gnueabi-
export ARCH = arm
THREADS := $(shell nproc)

# Extra kernel module configuration
MOD_SC18IM700_DIR = /tmp/sc18im700-mod

# Default target is to compile and tar
.PHONY: default
default: kernel modules dist

# Ensure the sc18im700 source exists
$(MOD_SC18IM700_DIR)/sc18im700.c:
	@echo "Downloading source for sc18im700 kernel module..."
	git clone https://github.com/uber-foo/sc18im700-mod.git /tmp/sc18im700-mod

# Builds the kernel
.PHONY: kernel
kernel:
	$(MAKE) -j$(THREADS)

# Builds kernel modules
.PHONY: modules
modules: /tmp/sc18im700-mod/sc18im700.c
	$(MAKE) -j$(THREADS) modules
	$(MAKE) -j$(THREADS) M=$(MOD_SC18IM700_DIR) modules

# Creates a tar
.PHONY: dist
dist:
	mkdir -p target/boot
	INSTALL_MOD_PATH="target/" $(MAKE) modules_install
	INSTALL_MOD_PATH="target/" $(MAKE) M=$(MOD_SC18IM700_DIR) modules_install
	cp arch/arm/boot/zImage  target/boot/zImage
	cp arch/arm/boot/dts/armada-385-ts*.dtb target/boot/
	@$(eval KERNEL_VERSION = $(shell cat include/config/kernel.release))
	cd target && \
	tar --owner=0 --group=0 -cJf ../linux-$(KERNEL_VERSION).tar.xz .

# Debug variables
.PHONY: debug
debug:
	@echo $$CROSS_COMPILE
	@echo $$ARCH
	@$(eval KERNEL_VERSION = $(shell cat include/config/kernel.release))
	@echo $(KERNEL_VERSION)
